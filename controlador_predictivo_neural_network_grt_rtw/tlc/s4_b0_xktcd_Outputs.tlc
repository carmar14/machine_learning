%implements s4_b0_xktcd_Outputs "C"

%function Outputs(block, system) Output
%<SLibCGIRAccessLocalVar(1, 0, "")> %% rtb_Switch
%<SLibCGIRAccessLocalVar(2, 0, "")> %% rtb_UnitDelay1
%<SLibCGIRAccessLocalVar(14, 0, "")> %% rtb_DiscreteStateSpace2
%<SLibCGIRAccessLocalVar(13, 0, "")> %% rtb_DiscreteStateSpace1
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

real_T rtb_Sum1[7];
real_T rtb_netsum1;
int32_T i;
real_T rtb_Sum1_k;
%closefile localVarDecl
%assign tlcOutputsFcnOfS4B0 = OpaqueTLCBlockFcn("Outputs", 4, 0, 0, 3)
%assign tlcOutputsFcnOfS4B7 = OpaqueTLCBlockFcn("Outputs", 4, 7, 0, 3)
%assign tlcOutputsFcnOfS4B9 = OpaqueTLCBlockFcn("Outputs", 4, 9, 0, 3)
%assign tlcOutputsFcnOfS4B10 = OpaqueTLCBlockFcn("Outputs", 4, 10, 0, 3)
/* {S!d22}Integrator: '<Root>/Integrator1' */
controlador_predictivo_neural_network_B.Concentracion = controlador_predictivo_neural_network_X.Integrator1_CSTATE;
if (%<(SLibCGIRIsSampleHit(2, 4))>) {
    /* {S!d24}UniformRandomNumber: '<Root>/Random Reference' */
    controlador_predictivo_neural_network_B.RandomReference = controlador_predictivo_neural_network_DW.RandomReference_NextOutput;
}
if (%<(SLibCGIRIsSampleHit(1, 4))>) {
%if !WHITE_SPACE(tlcOutputsFcnOfS4B0)
    /* {S!d26}Scope: '<Root>/Scope' */
%<tlcOutputsFcnOfS4B0>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS4B7)
    /* {S!d28}S-Function (predopt): '<S1>/S-Function' */
%<tlcOutputsFcnOfS4B7>\
%endif
    /* {S!d30}Switch: '<S3>/Switch' incorporates:
 *  Constant: '<S3>/Constant2'
 *  Fcn: '<S3>/Fcn'
 */
    if (controlador_predictivo_neural_network_P.NNPredictiveController_Normaliz >= controlador_predictivo_neural_network_P.Switch_Threshold) {
        rtb_Switch = (controlador_predictivo_neural_network_B.SFunction - 0.10091272597214518) * 2.0 / 3.8806461846482216 - 1.0;
    } else {
        rtb_Switch = controlador_predictivo_neural_network_B.SFunction;
    }
    /* {E!d30}End of Switch: '<S3>/Switch' */
%if !WHITE_SPACE(tlcOutputsFcnOfS4B9)

    /* {S!d32}DiscreteStateSpace: '<S3>/Discrete State-Space1' */
%<tlcOutputsFcnOfS4B9>\
%endif
    /* {S!d34}UnitDelay: '<S3>/Unit Delay1' */
    rtb_UnitDelay1 = controlador_predictivo_neural_network_DW.UnitDelay1_DSTATE;
%if !WHITE_SPACE(tlcOutputsFcnOfS4B10)
    /* {S!d36}DiscreteStateSpace: '<S3>/Discrete State-Space2' */
%<tlcOutputsFcnOfS4B10>\
%endif
    /* {S!d38}Gain: '<S3>/Matrix Gain2' */
    rtb_netsum1 = 0.0;
    for (i = 0; i < 7; i++) {
        /* {S!d40}Sum: '<S7>/Sum1' incorporates:
 *  Constant: '<S3>/Constant'
 *  Constant: '<S7>/one'
 *  Constant: '<S7>/one1'
 *  Gain: '<S3>/Matrix Gain'
 *  Gain: '<S3>/Matrix Gain1'
 *  Gain: '<S7>/Gain'
 *  Gain: '<S7>/Gain1'
 *  Math: '<S7>/Exp'
 *  Math: '<S7>/Reciprocal'
 *  Sum: '<S4>/netsum'
 *  Sum: '<S7>/Sum'
 *
 * About '<S7>/Exp':
 *  Operator: exp
 *
 * About '<S7>/Reciprocal':
 *  Operator: reciprocal
 */
        rtb_Sum1_k = 1.0 / (exp((((controlador_predictivo_neural_network_P.NNPredictiveController_LW1_2[i + 7] * rtb_DiscreteStateSpace2[1] + controlador_predictivo_neural_network_P.NNPredictiveController_LW1_2[i] * rtb_DiscreteStateSpace2[0]) + (controlador_predictivo_neural_network_P.NNPredictiveController_IW[i + 7] * rtb_DiscreteStateSpace1[1] + controlador_predictivo_neural_network_P.NNPredictiveController_IW[i] * rtb_DiscreteStateSpace1[0])) + controlador_predictivo_neural_network_P.NNPredictiveController_B1[i]) * controlador_predictivo_neural_network_P.Gain_Gain) + controlador_predictivo_neural_network_P.one_Value) * controlador_predictivo_neural_network_P.Gain1_Gain - controlador_predictivo_neural_network_P.one1_Value;
        /* {S!d42}Gain: '<S3>/Matrix Gain2' */
        rtb_netsum1 += controlador_predictivo_neural_network_P.NNPredictiveController_LW2_1[i] * rtb_Sum1_k;
        /* {S!d44}Sum: '<S7>/Sum1' incorporates:
 *  Sum: '<S4>/netsum'
 */
        rtb_Sum1[i] = rtb_Sum1_k;
    }
    /* {S!d46}Sum: '<S5>/netsum1' incorporates:
 *  Constant: '<S3>/Constant1'
 *  Gain: '<S3>/Matrix Gain2'
 */
    rtb_netsum1 += controlador_predictivo_neural_network_P.NNPredictiveController_B2;
}
/* {S!d48}Switch: '<S3>/Switch1' incorporates:
 *  Constant: '<S3>/Constant3'
 *  Fcn: '<S3>/Fcn1'
 */
if (controlador_predictivo_neural_network_P.NNPredictiveController_Normaliz >= controlador_predictivo_neural_network_P.Switch1_Threshold) {
    controlador_predictivo_neural_network_B.Switch1 = (controlador_predictivo_neural_network_B.Concentracion - 20.055666720010148) * 2.0 / -16.07410780938978 - 1.0;
} else {
    controlador_predictivo_neural_network_B.Switch1 = controlador_predictivo_neural_network_B.Concentracion;
}
/* {E!d48}End of Switch: '<S3>/Switch1' */
if (%<(SLibCGIRIsSampleHit(1, 4))>) {
    /* {S!d50}Switch: '<S3>/Switch2' incorporates:
 *  Constant: '<S3>/Constant4'
 *  Fcn: '<S3>/Fcn2'
 */
    if (controlador_predictivo_neural_network_P.NNPredictiveController_Normaliz >= controlador_predictivo_neural_network_P.Switch2_Threshold) {
        rtb_netsum1 = (rtb_netsum1 + 1.0) * -16.07410780938978 / 2.0 + 20.055666720010148;
    }
    /* {E!d50}End of Switch: '<S3>/Switch2' */

    /* {S!d52}SignalConversion: '<S1>/TmpSignal ConversionAtS-FunctionInport1' */
    controlador_predictivo_neural_network_B.TmpSignalConversionAtSFunctionI[0] = controlador_predictivo_neural_network_B.RandomReference;
    controlador_predictivo_neural_network_B.TmpSignalConversionAtSFunctionI[1] = controlador_predictivo_neural_network_B.Concentracion;
    controlador_predictivo_neural_network_B.TmpSignalConversionAtSFunctionI[2] = rtb_netsum1;
    for (i = 0; i < 7; i++) {
        controlador_predictivo_neural_network_B.TmpSignalConversionAtSFunctionI[i + 3] = rtb_Sum1[i];
    }
    /* {E!d52}End of SignalConversion: '<S1>/TmpSignal ConversionAtS-FunctionInport1' */
}
/* {S!d54}MATLAB Function: '<Root>/Sistema Reactor' incorporates:
 *  Constant: '<Root>/Constant'
 *  Integrator: '<Root>/Integrator'
 */
controlador_predictivo_neural_network_B.hp = (controlador_predictivo_neural_network_B.SFunction + controlador_predictivo_neural_network_P.Constant_Value) - 0.2 * sqrt(controlador_predictivo_neural_network_X.Integrator_CSTATE);
controlador_predictivo_neural_network_B.Cbp = ((24.9 - controlador_predictivo_neural_network_B.Concentracion) * controlador_predictivo_neural_network_B.SFunction / controlador_predictivo_neural_network_X.Integrator_CSTATE + (0.1 - controlador_predictivo_neural_network_B.Concentracion) * controlador_predictivo_neural_network_P.Constant_Value / controlador_predictivo_neural_network_X.Integrator_CSTATE) - controlador_predictivo_neural_network_B.Concentracion / ((1.0 + controlador_predictivo_neural_network_B.Concentracion) * (1.0 + controlador_predictivo_neural_network_B.Concentracion));
%<SLibInsertSolverResetCode()>\
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 3, fcnProtoType)>
%endfunction
